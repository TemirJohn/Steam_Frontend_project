import { Link } from 'react-router-dom';

function GameCard({ game }) {
    return (
        <div className="game-card">
            <h3>{game.title}</h3>
            <p>${game.price}</p>
            <p>{game.description}</p>
            <Link to={`/games/${game.id}`}>View Details</Link>
        </div>
    );
}

export default GameCard;

import { Link } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { logout } from '../redux/authReducer';

function Navbar() {
    const user = useSelector((state) => state.auth.user);
    const dispatch = useDispatch();

    return (
        <nav className="navbar">
            <Link to="/">Home</Link>
            {user ? (
                <>
                    {(user.role === 'admin' || user.role === 'developer') && (
                        <Link to="/dashboard">Dashboard</Link>
                    )}
                    <Link to="/games">Games</Link>
                    <button onClick={() => dispatch(logout())} className="btn btn-red">Logout</button>
                    <span >ðŸ‘‹ {user.username}</span>
                </>
            ) : (
                <>
                    <Link to="/login">Login</Link>
                    <Link to="/register">Register</Link>
                </>
            )}
        </nav>
    );
}

export default Navbar;

import { useState } from 'react';
import { useSelector } from 'react-redux';

function ReviewForm({ gameId, onReviewAdded }) {
    const [rating, setRating] = useState(5);
    const [comment, setComment] = useState('');
    const user = useSelector((state) => state.auth.user);

    async function handleSubmit(e) {
        e.preventDefault();
        if (!user) return;

        const review = { userId: user.id, gameId, rating, comment };

        try {
            const response = await fetch('http://localhost:3001/reviews', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(review),
            });
            if (response.ok) {
                onReviewAdded();
                setRating(5);
                setComment('');
            }
        } catch (error) {
            console.error('Error submitting review:', error);
        }
    }

    return (
        <form onSubmit={handleSubmit}>
            <label>
                Rating (1-5):
                <input
                    type="number"
                    min="1"
                    max="5"
                    value={rating}
                    onChange={(e) => setRating(Number(e.target.value))}
                />
            </label>
            <label>
                Comment:
                <textarea
                    value={comment}
                    onChange={(e) => setComment(e.target.value)}
                />
            </label>
            <button type="submit" className="btn btn-blue">Submit Review</button>
        </form>
    );
}

export default ReviewForm;

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { logout } from '../redux/authReducer';
import axios from '../axios';

function AddGame() {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const user = useSelector((state) => state.auth.user);
    const [name, setName] = useState('');
    const [price, setPrice] = useState('');
    const [description, setDescription] = useState('');
    const [categoryId, setCategoryId] = useState('');
    const [categories, setCategories] = useState([]);

    useEffect(() => {
        if (!user || user.role !== 'admin') {
            alert('Access denied! Only admins can add games.');
            dispatch(logout());
            navigate('/login');
        }
    }, [user, navigate, dispatch]);

    useEffect(() => {
        axios
            .get('/categories')
            .then((res) => {
                setCategories(res.data);
                if (res.data.length > 0) setCategoryId(res.data[0].id);
            })
            .catch((err) => console.error('Failed to load categories:', err));
    }, []);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!name || !price || !categoryId) {
            alert('Please fill in all required fields.');
            return;
        }
        try {
            const newGame = {
                name,
                price: parseFloat(price),
                description,
                categoryId: parseInt(categoryId),
            };
            await axios.post('/games', newGame, {
                headers: { 'User-ID': user.id },
            });
            alert('Game added!');
            navigate('/dashboard');
        } catch (error) {
            console.error('Error adding game:', error);
            alert('Failed to add game');
        }
    };

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">Add Game (Admins Only)</h1>
            <form onSubmit={handleSubmit} className="max-w-md mx-auto space-y-4">
                <label className="block">
                    Name:
                    <input
                        type="text"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        className="border p-2 rounded w-full"
                        required
                    />
                </label>
                <label className="block">
                    Price:
                    <input
                        type="number"
                        step="0.01"
                        value={price}
                        onChange={(e) => setPrice(e.target.value)}
                        className="border p-2 rounded w-full"
                        required
                    />
                </label>
                <label className="block">
                    Description:
                    <textarea
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        className="border p-2 rounded w-full"
                    />
                </label>
                <label className="block">
                    Category:
                    <select
                        value={categoryId}
                        onChange={(e) => setCategoryId(e.target.value)}
                        className="border p-2 rounded w-full"
                    >
                        {categories.map((cat) => (
                            <option key={cat.id} value={cat.id}>
                                {cat.name}
                            </option>
                        ))}
                    </select>
                </label>
                <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded w-full">
                    Add Game
                </button>
            </form>
        </div>
    );
}

export default AddGame;

import axios from 'axios';

const instance = axios.create({
    baseURL: 'http://localhost:8080',
});

export default instance;

import { Link } from 'react-router-dom';
import { useSelector } from 'react-redux';

function Dashboard() {
    const user = useSelector((state) => state.auth.user);

    return (
        <div className="container">
            <h1>Dashboard</h1>

            {user && user.role === 'admin' && (
                <Link to="/manage-users">
                    <button className="btn btn-blue">Manage Users</button>
                </Link>
            )}

            {user && (user.role === 'developer' || user.role === 'admin') && (
                <Link to="/add-game">
                    <button className="btn btn-blue">Add Game</button>
                </Link>
            )}
        </div>
    );
}

export default Dashboard;

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { logout } from '../redux/authReducer';

function DeleteCard() {
    const { id } = useParams();
    const [game, setGame] = useState(null);
    const user = useSelector((state) => state.auth.user);
    const dispatch = useDispatch();
    const navigate = useNavigate();

    useEffect(() => {
        if (!user || (user.role !== 'admin' && user.role !== 'developer')) {
            alert('Access denied! Only developers can delete games.');
            dispatch(logout());
            navigate('/login');
            return;
        }

        fetch(`http://localhost:3001/games/${id}`)
            .then((res) => {
                if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
                return res.text();
            })
            .then((text) => {
                const data = JSON.parse(text);
                if (user.role === 'developer' && data.developerId !== user.id) {
                    alert('You can only delete your own games.');
                    navigate('/dashboard');
                } else {
                    setGame(data);
                }
            })
            .catch((error) => console.error('Error fetching game:', error));
    }, [id, user, dispatch, navigate]);

    async function handleDelete() {
        try {
            const response = await fetch(`http://localhost:3001/games/${id}`, {
                method: 'DELETE',
            });
            if (response.ok) {
                alert('Game deleted successfully!');
                navigate('/dashboard');
            } else {
                throw new Error('Failed to delete game');
            }
        } catch (error) {
            console.error('Error deleting game:', error);
            alert('Error deleting game. Check console for details.');
        }
    }

    if (!game) return <div>Loading...</div>;

    return (
        <div className="container">
            <h1>Delete Game</h1>
            <p>Are you sure you want to delete "{game.title}"?</p>
            <p>This action cannot be undone.</p>
            <button onClick={handleDelete} className="btn btn-red">Confirm Delete</button>
            <button onClick={() => navigate('/dashboard')} className="btn btn-gray">Cancel</button>
        </div>
    );
}

export default DeleteCard;

// src/pages/EditGame.jsx
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';

function EditGame() {
    const { id } = useParams();
    const navigate = useNavigate();
    const user = useSelector((state) => state.auth.user);

    const [game, setGame] = useState(null);
    const [title, setTitle] = useState('');
    const [price, setPrice] = useState('');
    const [description, setDescription] = useState('');

    useEffect(() => {
        if (!user || (user.role !== 'admin' && user.role !== 'developer')) {
            alert('Access denied');
            navigate('/');
        }
    }, [user, navigate]);

    useEffect(() => {
        fetch(`http://localhost:3001/games/${id}`)
            .then(res => res.json())
            .then(data => {
                setGame(data);
                setTitle(data.title);
                setPrice(data.price);
                setDescription(data.description);
            });

        fetch(`http://localhost:3001/games/${id}`)
            .then((res) => {
                if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
                return res.text();
            })
            .then((text) => {
                console.log('Raw game response:', text);
                const data = JSON.parse(text);
                if (user.role === 'developer' && data.developerId !== user.id) {
                    alert('You can only edit your own games.');
                    navigate('/dashboard');
                } else {
                    setGame(data);
                }
            })
            .catch((error) => console.error('Error fetching game:', error));

    }, [id, user, navigate]);



    const handleSave = async (e) => {
        e.preventDefault();

        const updatedGame = {
            ...game,
            title,
            price: Number(price),
            description
        };

        try {
            const res = await fetch(`http://localhost:3001/games/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedGame),
            });

            if (res.ok) {
                alert('Game updated successfully!');
                navigate(`/games/${id}`);
            } else {
                alert('Failed to update game');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    };

    if (!game) return <div>Loading...</div>;

    return (
        <div className="container">
            <h1 >Edit Game</h1>
            <form onSubmit={handleSave}>
                <label>
                    Title:
                    <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} />
                </label>
                <label>
                    Price:
                    <input type="number" value={price} onChange={(e) => setPrice(e.target.value)} />
                </label>
                <label>
                    Description:
                    <textarea value={description} onChange={(e) => setDescription(e.target.value)} />
                </label>
                <button type="submit" className="btn btn-blue">Save</button>
                <button type="button" className="btn btn-grey" onClick={() => navigate(-1)}>Cancel</button>
            </form>
        </div>
    );
}

export default EditGame;

import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import ReviewForm from '../components/ReviewForm';

function GameDetail() {
    const { id } = useParams();
    const [game, setGame] = useState(null);
    const [reviews, setReviews] = useState([]);
    const user = useSelector((state) => state.auth.user);

    useEffect(() => {
        fetch(`http://localhost:3001/games/${id}`)
            .then((res) => res.json())
            .then((data) => setGame(data));
        fetch(`http://localhost:3001/reviews?gameId=${id}`)
            .then((res) => res.json())
            .then((data) => setReviews(data));
    }, [id]);

    async function handlePurchase() {
        if (!user) {
            alert('Please log in to purchase');
            return;
        }

        const purchase = {
            userId: user.id,
            gameId: Number(id),
            purchaseDate: new Date().toISOString().split('T')[0],
        };

        try {
            const response = await fetch('http://localhost:3001/purchases', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(purchase),
            });
            if (response.ok) {
                alert('Game purchased successfully!');
            }
        } catch (error) {
            console.error('Error purchasing game:', error);
        }
    }

    if (!game) return <div>Loading...</div>;

    const handleReviewAdded = () => {
        fetch(`http://localhost:3001/reviews?gameId=${id}`)
            .then((res) => res.json())
            .then((data) => setReviews(data));
    };

    const isEditor = user && (user.role === 'admin' || user.role === 'developer');

    if (!game) return <div>Loading...</div>;

    return (
        <div className="container">
            <h1>{game.title}</h1>
            <p>${game.price}</p>
            <p>{game.description}</p>
            {isEditor && (
                <>
                    <Link to={`/games/${id}/edit`}>
                        <button className="btn btn-blue">Edit Game</button>
                    </Link>
                    <Link to={`/delete-game/${id}`}>
                        <button className="btn btn-red">Delete Game</button>
                    </Link>
                </>
            )}
            {user && user.role === 'user' && (
                <button
                    onClick={handlePurchase}
                    className="btn btn-green"
                >
                    Buy Now
                </button>
            )}
            <h2>Reviews</h2>
            <ul>
                {reviews.map((review) => (
                    <li key={review.id}>
                        Rating: {review.rating}/5 - {review.comment}
                    </li>
                ))}
            </ul>
            {user && (
                <ReviewForm gameId={Number(id)} onReviewAdded={handleReviewAdded} />
            )}
        </div>
    );
}

export default GameDetail;

import { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { useSearchParams } from 'react-router-dom';
import axios from '../utils/axios';

function Games() {
    const [games, setGames] = useState([]);
    const [searchParams, setSearchParams] = useSearchParams();
    const categoryId = searchParams.get('categoryId') || 'all';
    const user = useSelector((state) => state.auth.user);

    useEffect(() => {
        const url = categoryId === 'all' ? '/games' : `/games?categoryId=${categoryId}`;
        axios
            .get(url)
            .then((res) => setGames(res.data))
            .catch((err) => console.error('Error fetching games:', err));
    }, [categoryId]);

    const handleBuy = async (gameId) => {
        if (!user) return alert('Please log in to buy games.');
        try {
            await axios.post(
                '/ownership',
                { gameId, status: 'owned' },
                { headers: { 'User-ID': user.id } }
            );
            alert('Game purchased!');
        } catch (error) {
            console.error('Error purchasing game:', error);
            alert('Failed to purchase game');
        }
    };

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">Game Catalog</h1>
            <div className="mb-4 space-x-2">
                <button
                    onClick={() => setSearchParams({})}
                    className="bg-gray-200 px-4 py-2 rounded"
                >
                    All
                </button>
                <button
                    onClick={() => setSearchParams({ categoryId: '1' })}
                    className="bg-gray-200 px-4 py-2 rounded"
                >
                    Action
                </button>
                <button
                    onClick={() => setSearchParams({ categoryId: '2' })}
                    className="bg-gray-200 px-4 py-2 rounded"
                >
                    RPG
                </button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {games.map((game) => (
                    <div key={game.id} className="p-4 bg-gray-100 rounded shadow">
                        <h3 className="text-lg font-semibold">{game.name}</h3>
                        <p>${game.price.toFixed(2)}</p>
                        <p className="text-gray-600">{game.description}</p>
                        {user && user.role !== 'admin' && (
                            <button
                                onClick={() => handleBuy(game.id)}
                                className="mt-2 bg-green-500 text-white px-4 py-2 rounded"
                            >
                                Buy
                            </button>
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
}

export default Games;

import { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { axios } from '../utils/axios';
import GameCard from '../components/GameCard';

function Home() {
    const user = useSelector((state) => state.auth.user);
    const [games, setGames] = useState([]);
    const [searchParams, setSearchParams] = useSearchParams();
    const categoryFilter = searchParams.get('category') || 'all';

    // useEffect(() => {
    //     let url = 'http://localhost:3001/games';
    //     if (categoryFilter !== 'all') {
    //         url += `?categoryId=${categoryFilter}`;
    //     }
    //
    //     fetch(url)
    //         .then((res) => res.json())
    //         .then((data) => setGames(data))
    //         .catch((error) => console.error('Error fetching games:', error));
    // }, [categoryFilter]);

    useEffect(() => {
        if (user) {
            axios
                .get(`http://localhost:8080/library`, {
                    headers: { "User-ID": user.id },
                })
                .then((res) => setOwnedGames(res.data));
        }
    }, [user]);

    return (
        <div className="container">
            <h1>Welcome to SteamLite</h1>
            {user ? (
                <p>
                    Hello, {user.username}! You are logged in as <strong>{user.role}</strong>.
                </p>
            ) : (
                <p>Please log in to access more features.</p>
            )}
            <h2>Games</h2>
            <button
                onClick={() => setSearchParams({})}
                className="btn btn-gray"
            >
                All
            </button>
            <button
                onClick={() => setSearchParams({ category: '1' })}
                className="btn btn-gray"
            >
                Action
            </button>
            <button
                onClick={() => setSearchParams({ category: '2' })}
                className="btn btn-gray"
            >
                RPG
            </button>
            <button
                onClick={() => setSearchParams({ category: '3' })}
                className="btn btn-gray"
            >
                Strategy
            </button>

            <br/>
            <br/>

            <div className="grid">
                {games.map((game) => (
                    <GameCard key={game.id} game={game} />
                ))}
            </div>
        </div>
    );
}

export default Home;

import { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import axios from '../utils/axios'; // Ensure axios is configured (see below)

function Library() {
    const [ownedGames, setOwnedGames] = useState([]);
    const user = useSelector((state) => state.auth.user);

    useEffect(() => {
        if (user) {
            axios
                .get('http://localhost:8080/library', {
                    headers: { 'User-ID': user.id },
                })
                .then((res) => setOwnedGames(res.data))
                .catch((err) => {
                    console.error('Error fetching library:', err);
                    alert('Failed to load library');
                });
        }
    }, [user]);

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">My Library</h1>
            {!user ? (
                <p>Please log in to view your library.</p>
            ) : ownedGames.length === 0 ? (
                <p>No games in your library yet.</p>
            ) : (
                <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {ownedGames.map((game) => (
                        <li key={game.id} className="p-4 bg-gray-100 rounded shadow">
                            <h3 className="text-lg font-semibold">{game.name}</h3>
                            <p>${game.price.toFixed(2)}</p>
                            <p className="text-gray-600">{game.description}</p>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
}

export default Library;

import { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { login } from '../redux/authReducer';
import axios from '../utils/axios';

function Login() {
    const dispatch = useDispatch();
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();

    async function handleLogin(e) {
        e.preventDefault();
        try {
            const response = await axios.post('/login', { email, password });
            dispatch(login(response.data));
            navigate('/dashboard');
        } catch (error) {
            console.error('Login error:', error);
            alert(error.response?.data?.error || 'Login failed');
        }
    }

    return (
        <div className="container mx-auto p-4">
            <form onSubmit={handleLogin} className="max-w-md mx-auto space-y-4">
                <input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="border p-2 rounded w-full"
                    required
                />
                <input
                    type="password"
                    placeholder="Password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="border p-2 rounded w-full"
                    required
                />
                <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded w-full">
                    Login
                </button>
            </form>
        </div>
    );
}

export default Login;

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { logout } from '../redux/authReducer';

function ManageUsers() {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const user = useSelector((state) => state.auth.user);
    const [users, setUsers] = useState([]);

    useEffect(() => {
        if (!user || user.role !== 'admin') {
            alert('Access denied! Only admins can manage users.');
            dispatch(logout());
            navigate('/login');
        }
    }, [user, navigate, dispatch]);

    useEffect(() => {
        fetch('http://localhost:3001/users')
            .then((res) => res.json())
            .then((data) => setUsers(data))
            .catch((error) => console.error('Error fetching users:', error));
    }, []);

    async function handleDelete(id) {
        try {
            const response = await fetch(`http://localhost:3001/users/${id}`, {
                method: 'DELETE',
            });
            if (response.ok) {
                setUsers(users.filter((u) => u.id !== id));
            }
        } catch (error) {
            console.error('Error deleting user:', error);
        }
    }

    return (
        <div className="container">
            <h1>Manage Users (Admins Only)</h1>
            <ul>
                {users.map((u) => (
                    <li key={u.id}>
                        <span>{u.username} - {u.role} - {u.email}</span>
                        <button
                            onClick={() => handleDelete(u.id)}
                            className="btn btn-red"
                        >
                            Delete
                        </button>
                    </li>
                ))}
            </ul>
        </div>
    );
}

export default ManageUsers;

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import bcrypt from 'bcryptjs';

function Register() {
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();

    async function handleRegister(e) {
        e.preventDefault();

        try {
            const hashedPassword = await bcrypt.hash(password, 10);

            const newUser = {
                username,
                email,
                password: hashedPassword,
                role: 'user'
            };

            const response = await fetch('http://localhost:3001/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newUser),
            });

            if (response.ok) {
                navigate('/login');
            } else {
                alert('Registration failed');
            }
        } catch (error) {
            console.error('Error registering:', error);
            alert('Error during registration');
        }
    }

    return (
        <div className="container">
            <h1>Register</h1>
            <form onSubmit={handleRegister}>
                <input
                    type="text"
                    placeholder="Username"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    required
                />
                <input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                />
                <input
                    type="password"
                    placeholder="Password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                />
                <button type="submit" className="btn btn-blue">Register</button>
            </form>
        </div>
    );
}

export default Register;

const initialState = { user: null };

function authReducer(state = initialState, action) {
    switch (action.type) {
        case 'LOGIN':
            return { ...state, user: action.payload };
        case 'LOGOUT':
            return { ...state, user: null };
        default:
            return state;
    }
}

export default authReducer;

export const login = (user) => ({ type: 'LOGIN', payload: user });
export const logout = () => ({ type: 'LOGOUT' });

import { createStore, combineReducers } from 'redux';
import authReducer from './authReducer';

const rootReducer = combineReducers({
    auth: authReducer,
});

const store = createStore(rootReducer);

export default store;

import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import Navbar from './components/Navbar';
import Home from './pages/Home';
import Login from './pages/Login';
import Register from './pages/Register';
import Dashboard from './pages/Dashboard';
import Games from './pages/Games';
import GameDetail from './pages/GameDetail';
import AddGame from './pages/AddGame';
import ManageUsers from './pages/ManageUsers';
import EditGame from './pages/EditGame';
import DeleteCard from './pages/DeleteCard';
import Library from "./pages/Library";

function App() {
    const user = useSelector((state) => state.auth.user);

    return (
        <BrowserRouter>
            <Navbar />
            <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/login" element={<Login />} />
                <Route path="/register" element={<Register />} />
                <Route path="/dashboard" element={user ? <Dashboard /> : <Navigate to="/login" />} />
                <Route path="/games" element={<Games />} />
                <Route path="/games/:id" element={<GameDetail />} />
                <Route path="/games/:id/edit" element={<EditGame />} />
                <Route path="/add-game" element={user ? <AddGame /> : <Navigate to="/dashboard" />} />
                <Route path="/delete-game/:id" element={user ? <DeleteCard /> : <Navigate to="/dashboard" />} />
                <Route path="/manage-users" element={user ? <ManageUsers /> : <Navigate to="/dashboard" />} />
                <Route path="/library" element={<Library />} />
            </Routes>
        </BrowserRouter>
    );
}

export default App;

@tailwind base;
@tailwind components;
@tailwind utilities;

* {
    font-family: "Duru Sans", sans-serif;
}

.gradient {
    background: rgb(58, 99, 144);
    background: linear-gradient(
            90deg,
            rgba(58, 99, 144, 1) 8%,
            rgba(90, 140, 182, 1) 31%,
            rgba(35, 71, 138, 1) 52%,
            rgba(27, 55, 125, 1) 58%
    );
}

body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import store from './redux/store';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
    <React.StrictMode>
        <Provider store={store}>
            <App />
        </Provider>
    </React.StrictMode>
);